<launch>

  <!-- Set use_sim_time true for datasets-->
  <param name="use_sim_time" value="true" />

  <node name="object_detector" pkg="dl_node" type="dl_pose_node.py" output="screen" />



  <group ns="stereo">

    <!-- Call stereo_image_proc to undistort and rectify images -->
    <node pkg="stereo_image_proc" type="stereo_image_proc" name="stereo_image_proc" />

  </group>

  <!-- Now we crop the images to remove black areas resulting from undistortion.
   Both images must be cropped to the same size
   because intrisic matrices must be of the same for both -->

  <!-- Crop left image -->
  <node pkg="nodelet" type="nodelet"
        args="standalone image_proc/crop_decimate"
        name="left_decimator">
    <param name="x_offset" type="int" value="52" />
    <param name="y_offset" type="int" value="51" />
    <param name="width" type="int" value="1177" />
    <param name="height" type="int" value="860" />

    <!-- remap input topics -->
    <remap from="camera/image_raw" to="/stereo/left/image_rect_color" />
    <remap from="camera/camera_info" to="/stereo/left/camera_info" />

    <!-- remap output topics -->
    <remap from="camera_out/image_raw" to="/stereo/left_crop/image_rect_color" />
    <remap from="camera_out/camera_info" to="/stereo/left_crop/camera_info" />
  </node>

  <!-- Crop right image -->
  <node pkg="nodelet" type="nodelet"
        args="standalone image_proc/crop_decimate"
        name="right_decimator">
    <param name="x_offset" type="int" value="52" />
    <param name="y_offset" type="int" value="51" />
    <param name="width" type="int" value="1177" />
    <param name="height" type="int" value="860" />

    <!-- remap input topics -->
    <remap from="camera/image_raw" to="/stereo/right/image_rect_color" />
    <remap from="camera/camera_info" to="/stereo/right/camera_info" />

    <!-- remap output topics -->
    <remap from="camera_out/image_raw" to="/stereo/right_crop/image_rect_color" />
    <remap from="camera_out/camera_info" to="/stereo/right_crop/camera_info" />
  </node>

  <!-- Level7 does not publish the left camera frame in the TF tree, only the right (called camera_0).
       TODO the transformation here should not be the same as for the rectified cameras...  -->
  <!-- static_transform_publisher "x y z yaw pitch roll frame_id child_frame_id" -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="camera_broadcaster" args="-0.301772 0 0 0 0 0 camera_0 camera_1" />

  <!-- S-PTAM path publisher. Transforms poses into path. -->
  <node pkg="ros_utils" type="pose_to_path" name="sptam_path">
    <remap from="pose" to="sptam/robot/pose" />
    <remap from="path" to="sptam/robot/path" />
  </node>

  <!-- Clean S-PTAM parameters -->
  <rosparam command="delete" ns="sptam" />

  <!-- Read S-PTAM parameters file -->
  <rosparam command="load" ns="sptam" file="$(find sptam)/configurationFiles/level7.yaml" />

   <!-- Nodelet Manager -->
  <node pkg="nodelet" type="nodelet" name="nodelet_manager"  args="manager" output="screen" clear_params="true" />

  <!-- SPTAM Nodelet -->
  <node pkg="nodelet" type="nodelet" name="sptam" args="load sptam/sptam_nodelet nodelet_manager" output="screen" clear_params="true" >

    <param name="use_prediction" value="true" />
    <param name="approximate_sync" value="false" />
    <param name="publish_transform" value="true" />
    <param name="publish_on_fail" value="true" />

    <param name="prediction_frame" value="odom_combined" />
    <!--param name="base_frame" value="base_link"/-->
    <param name="camera_frame" value="camera_1" />
    <!--param name="map_frame" value="map"/-->
    <!--param name="reference_frame" value="base_link"/-->

    <!-- Remap topics  -->
    <remap from="/stereo/left/image_rect"  to="/stereo/left/image_rect_color" />
    <remap from="/stereo/right/image_rect"  to="/stereo/right/image_rect_color" />
    <remap from="/stereo/left/camera_info"  to="/stereo/left_crop/camera_info" />
    <remap from="/stereo/right/camera_info"  to="/stereo/right_crop/camera_info" />

    <!-- Remap Odometry message -->
    <remap from="robot/pose" to="odom" />

  </node>

</launch>
